#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("img_in_data_dout", 8, hls_in, 4, "ap_fifo", "fifo_data_in", 828000),
	Port_Property("img_in_data_empty_n", 1, hls_in, 4, "ap_fifo", "fifo_status", 828000),
	Port_Property("img_in_data_read", 1, hls_out, 4, "ap_fifo", "fifo_port_we", 828000),
	Port_Property("img_template_data_dout", 8, hls_in, 9, "ap_fifo", "fifo_data_in", 828000),
	Port_Property("img_template_data_empty_n", 1, hls_in, 9, "ap_fifo", "fifo_status", 828000),
	Port_Property("img_template_data_read", 1, hls_out, 9, "ap_fifo", "fifo_port_we", 828000),
	Port_Property("img_out_data_din", 16, hls_out, 14, "ap_fifo", "fifo_data_in", 8280),
	Port_Property("img_out_data_full_n", 1, hls_in, 14, "ap_fifo", "fifo_status", 8280),
	Port_Property("img_out_data_write", 1, hls_out, 14, "ap_fifo", "fifo_port_we", 8280),
	Port_Property("img_in_allocatedFlag", 8, hls_in, 0, "ap_none", "in_data", 1),
	Port_Property("img_in_rows", 32, hls_in, 1, "ap_none", "in_data", 1),
	Port_Property("img_in_cols", 32, hls_in, 2, "ap_none", "in_data", 1),
	Port_Property("img_in_size", 32, hls_in, 3, "ap_none", "in_data", 1),
	Port_Property("img_template_allocatedFlag", 8, hls_in, 5, "ap_none", "in_data", 1),
	Port_Property("img_template_rows", 32, hls_in, 6, "ap_none", "in_data", 1),
	Port_Property("img_template_cols", 32, hls_in, 7, "ap_none", "in_data", 1),
	Port_Property("img_template_size", 32, hls_in, 8, "ap_none", "in_data", 1),
	Port_Property("img_out_allocatedFlag", 8, hls_in, 10, "ap_none", "in_data", 1),
	Port_Property("img_out_rows", 32, hls_in, 11, "ap_none", "in_data", 1),
	Port_Property("img_out_cols", 32, hls_in, 12, "ap_none", "in_data", 1),
	Port_Property("img_out_size", 32, hls_in, 13, "ap_none", "in_data", 1),
	Port_Property("s_axi_control_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_AWADDR", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_ARADDR", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "match_template";
